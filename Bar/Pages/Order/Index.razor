@page "/Order/Index"
@page "/"

@using Bar.DataAcess.Repository.IRepository
@inject IProductAppService _productService
@inject IOrderAppService _orderService
@inject IUserAppService _userService
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _provider
@inject IDialogService _dialogService
@inject AppData _appData

<div class="my-3">
    <MudText Typo="Typo.h5">Items in the bar</MudText>
    <MudTable Items="@products.Values" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Product Name</MudTh>
            <MudTh>Amount in Bar</MudTh>
            <MudTh>Price</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            @if(context.Amount > 0)
            {
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Amount">@context.Amount</MudTd>
                <MudTd DataLabel="Price">@(string.Format("{0:N0}", context.Price.ToString("N0")))</MudTd>
                <MudTd><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=>Add(context.Id)">Add</MudButton></MudTd>
                <MudTd><MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="()=>Remove(context.Id)">Remove</MudButton></MudTd>    
            }
        </RowTemplate>
    </MudTable>
</div>

@if (order.Items != null ? order.Items.Count > 0 : false)
{
    <MudText Typo="Typo.h5">Items in the basket</MudText>
    <MudTable Items="@order.Items" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Product Name</MudTh>
            <MudTh>Unit Price</MudTh>
            <MudTh>Items in basket</MudTh>
            <MudTh>Price</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@products[context.ProductId].Name</MudTd>
            <MudTd DataLabel="ItemPrice">@string.Format("{0:N0}", products[context.ProductId].Price)</MudTd>
            <MudTd DataLabel="NumberOfItems">@context.Amount</MudTd>
            <MudTd DataLabel="Price">@(string.Format("{0:N0}", context.Amount * products[context.ProductId].Price))</MudTd>
        </RowTemplate>
    </MudTable>
    <MudText Typo="Typo.h6">The total price is: @(string.Format("{0:N0}", order.OrderTotal)) CZK</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="()=>PlaceOrderAsync()">Place Order</MudButton>
}

@code {
    private Dictionary<int, ProductViewModel> products = new Dictionary<int, ProductViewModel>();
    private OrderViewModel order = new OrderViewModel();


    protected override async Task OnInitializedAsync()
    {
        var authState = await _provider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }

        var loadProducts = await _productService.GetProductsAsync();
        products = loadProducts.ToDictionary(x => x.Id);
        order.Items = new List<OrderItemViewModel>();
    }

    private void Add(int id)
    {
        if (products[id].Amount > 0)
        {
            // Find if a same item has been already chosen
            foreach (var item in order.Items)
            {
                if (item.ProductId == id)
                {
                    item.Amount++;
                    products[id].Amount--;
                    order.OrderTotal += products[id].Price;
                    return;
                }
            }

            // Otherwise create a new OrderItemViewModel
            var newItem = new OrderItemViewModel();
            newItem.ProductId = products[id].Id;
            newItem.Amount = 1;
            products[id].Amount--;
            order.Items.Add(newItem);
            order.OrderTotal += products[id].Price;
        }
    }

    private void Remove(int id)
    {
        // Find if a same item has been already chosen
        foreach (var item in order.Items)
        {
            if (item.ProductId == id && item.Amount > 0)
            {
                item.Amount--;
                products[id].Amount++;
                order.OrderTotal -= products[id].Price;
                if (item.Amount < 1) order.Items.Remove(item);
                return;
            }
        }
    }

    private async Task PlaceOrderAsync()
    {
        order.OrderDate = DateTime.Now;

        var userName = (await _provider.GetAuthenticationStateAsync()).User.Identity.Name;

        await _orderService.CreateOrderAsync(order, userName);
        await _productService.UpdateProducts(products);
        await _dialogService.ShowMessageBox("Success", "The order has been placed.");

        _appData.Credit = await _userService.GetCurrentUsersCreditAsync();

        _navigationManager.NavigateTo("/Order/Summary");
    }
}
